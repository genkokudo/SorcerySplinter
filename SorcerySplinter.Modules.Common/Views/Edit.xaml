<UserControl x:Class="SorcerySplinter.Modules.Common.Views.Edit"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:SorcerySplinter.Modules.Common.Views"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300"
             xmlns:prism="http://prismlibrary.com/" xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
             prism:ViewModelLocator.AutoWireViewModel="True" >
    <Grid>
        <!-- 画面分割の定義 -->
        <Grid.RowDefinitions>
            <RowDefinition Height="1*"/>
            <RowDefinition Height="2*"/>
            <RowDefinition Height="40"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="240"/>
            <ColumnDefinition Width="1*"/>
        </Grid.ColumnDefinitions>
        <!-- 左上 -->
        <StackPanel Margin="0,0,0,0" Grid.Row="0" Grid.Column="0" Grid.RowSpan="2">
            <Label Margin="0,0,0,0"  Content="ファイル名＆ショートカットフレーズ"></Label>
            <TextBox Text="{Binding Shortcut, UpdateSourceTrigger=PropertyChanged}" materialDesign:HintAssist.Hint="cs_shortcut" ToolTip="VSでスニペットを呼ぶためのフレーズです。ファイル名にもなります。">
                <i:Interaction.Triggers>
                    <!-- 入力時の処理：出力可能か判定する -->
                    <i:EventTrigger EventName="TextChanged">
                        <i:InvokeCommandAction Command="{Binding SetIsEnableOutputCommand}"/>
                    </i:EventTrigger>
                </i:Interaction.Triggers>
            </TextBox>
            <Label Margin="0,20,0,0" Content="言語"></Label>
            <ComboBox ItemsSource="{Binding LanguageDictionary}" SelectedValuePath="Value" DisplayMemberPath="Key" SelectedValue="{Binding Language}" ToolTip="どの言語のスニペットか選択します。"/>
            <Label Margin="0,20,0,0" Content="特殊文字"></Label>
            <TextBox Text="{Binding Delimiter, UpdateSourceTrigger=PropertyChanged}" Width="48" HorizontalAlignment="Left" materialDesign:HintAssist.Hint="$" ToolTip="この文字で囲んだ文字列が変数となります。VisualStudioの仕様上、設定しない場合'$'になります。" MaxLength="1">
            </TextBox>
            <Label Margin="0,20,0,0" Content="説明"></Label>
            <TextBox Text="{Binding Description}" TextWrapping="Wrap" Style="{StaticResource MaterialDesignOutlinedTextBox}" materialDesign:HintAssist.Hint="VSで表示する説明文" ToolTip="この説明はVSで表示させることができます。" />
            <Label Margin="0,20,0,0" Content="※import情報は設定できません。" Foreground="Blue" ToolTip="これは多分C#スニペットだけ意味がある項目ですが、無くてもそんなに困らないので実装してません。"></Label>
            <Label Margin="0,10,0,0" Content="※スニペットの種類は設定できません。" Foreground="Blue" ToolTip="これはC#スニペットだけ意味がある項目ですが、設定してもコードを呼び出せる場所に制約が設定できるだけなので'Any'で統一します。"></Label>
            <Label Margin="0,10,0,0" Content="※関数はClassNameのみです。" Foreground="Blue" ToolTip="GenerateSwitchCasesやSimpleTypeName関数はややこしい割にそんなに良い機能ではないので実装していません。"></Label>
            <Label Margin="0,10,0,0" Content="※変数は全てLiteralとします。" Foreground="Blue" ToolTip="Objectはこのソフトでは設定できません。"></Label>
        </StackPanel>
        <!-- 右側 -->
        <ScrollViewer Grid.Row="0" Grid.Column="1">
        <StackPanel Margin="20,0,0,0" ToolTip="消したいときは、対象行のどれかの列を選択した状態で「Delete」キーを押します。">
            <Label Margin="0,0,0,0" Content="テンプレート内変数リスト"></Label>
            <DataGrid ItemsSource="{Binding Variables}" 
                      CanUserAddRows="True" 
                      CanUserDeleteRows="True" 
                      AutoGenerateColumns="False" 
                      CanUserResizeRows="False"
                      HeadersVisibility="All"
                      SelectionUnit="FullRow"
                      ToolTip="スニペット内の変数を定義します。C#のみ「クラス名を代入」をチェックすると、そのスニペットを貼ったクラス名が代入されます。この時、デフォルト値は必要ありません。">
                <!-- 各項目の設定 -->
                <DataGrid.Columns>
                    <DataGridTextColumn Header="変数名" Binding="{Binding Name}"
                        ElementStyle="{StaticResource MaterialDesignDataGridTextColumnStyle}"
                        EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnEditingStyle}">
                    </DataGridTextColumn>
                    <DataGridTextColumn Header="説明" Binding="{Binding Description}"
                        ElementStyle="{StaticResource MaterialDesignDataGridTextColumnStyle}"
                        EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnEditingStyle}">
                    </DataGridTextColumn>
                    <DataGridTextColumn Header="デフォルト値" Binding="{Binding DefValue}"
                        ElementStyle="{StaticResource MaterialDesignDataGridTextColumnStyle}"
                        EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnEditingStyle}">
                    </DataGridTextColumn>
                    <DataGridCheckBoxColumn Header="クラス名を代入" Binding="{Binding IsClassName}"
                        ElementStyle="{StaticResource MaterialDesignDataGridCheckBoxColumnStyle}"
                        EditingElementStyle="{StaticResource MaterialDesignDataGridCheckBoxColumnEditingStyle}" />
                </DataGrid.Columns>
            </DataGrid>
        </StackPanel>
        </ScrollViewer>
        <TextBox Margin="20,20,0,20" Style="{StaticResource MaterialDesignOutlinedTextBox}" Grid.Row="1" Grid.Column="1"
                AcceptsReturn="True" TextWrapping="Wrap" VerticalScrollBarVisibility="Auto"
                materialDesign:HintAssist.Hint="テンプレート入力欄"
                ToolTip="ここにテンプレートとなるソースを入力してください。置換する場所は$Abcd$のように特殊文字で囲んでください。"
                Text="{Binding TemplateInput}">
            <i:Interaction.Triggers>
                <!-- 入力フォーカスが離れた時の処理 -->
                <i:EventTrigger EventName="LostKeyboardFocus">
                    <i:InvokeCommandAction Command="{Binding SetTextCommand}" CommandParameter="{Binding Text, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TextBox}}}"/>
                </i:EventTrigger>
            </i:Interaction.Triggers>
        </TextBox>
        <!-- 右下 -->
        <StackPanel Grid.Row="2" Grid.Column="1" Orientation="Horizontal" HorizontalAlignment="Right">
            <Button Content="VSフォルダを開く" Margin="10,0" Command="{Binding OpenVsFolderCommand}" IsEnabled="{Binding IsExistsVsFolder}" HorizontalAlignment="Right" VerticalAlignment="Bottom" />
            <Button Content="任意フォルダを開く" Margin="10,0" Command="{Binding OpenCommonFolderCommand}" IsEnabled="{Binding IsExistsCommonFolder}" HorizontalAlignment="Right" VerticalAlignment="Bottom" />
            <Button Content="出力" Margin="10,0,0,0" Command="{Binding OutputCommand}" HorizontalAlignment="Right" VerticalAlignment="Bottom" IsEnabled="{Binding IsEnableOutput}" />
        </StackPanel>
    </Grid>
</UserControl>
